// --------------------> OPTIMIZED APPROACH <--------------------
// TIME COMPLEXITY : O(n) , SPACE COMPLEXITY : O(k)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int start = 0, maxLen = 0;

        for (int end = 0; end < s.length(); end++) {
            char ch = s.charAt(end);

            // If character is already in window, move start
            if (map.containsKey(ch)) {
                start = Math.max(start, map.get(ch) + 1);
            }

            // Update character's latest index
            map.put(ch, end);

            // Update max length of substring
            maxLen = Math.max(maxLen, end - start + 1);
        }

        return maxLen;
    }
}



// --------------------> BRUTE FORCE APPROACH <--------------------
// TIME COMPLEXITY : O(nÂ²) , SPACE COMPLEXITY : O(n)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxLen = 0;

        for (int i = 0; i < s.length(); i++) {
            HashSet<Character> set = new HashSet<>();

            for (int j = s.length() - 1; j >= i; j--) {
                char ch = s.charAt(j);

                if (set.contains(ch)) {
                    break; // repeat character, break
                }

                set.add(ch);
                maxLen = Math.max(maxLen, j - i + 1);
            }
        }

        return maxLen;
    }
}
