// --------------------> OPTIMIZED APPROACH <--------------------
// TIME COMPLEXITY : O(n) , SPACE COMPLEXITY : O(k)

import java.util.HashMap;

class Solution 
{
    public int lengthOfLongestSubstring(String s) 
{
        HashMap<Character, Integer> map = new HashMap<>() ;
        int maxLen = 0;
        int start = 0; // Left boundary of window

        for (int end = 0; end < s.length(); end++) 
        {
            char current = s.charAt(end);

            // If duplicate character found inside window
            if (map.containsKey(current)) 
          {
                // Move start to one past the last index of this character
                start = Math.max(start, map.get(current) + 1);
            }

            // Store/update character's latest index
            map.put(current, end);

            // Update max length of valid window
            maxLen = Math.max(maxLen, end - start + 1) ;
        }

        return maxLen;
    }
}


// --------------------> BRUTE FORCE APPROACH <--------------------
// TIME COMPLEXITY : O(nÂ²) , SPACE COMPLEXITY : O(n)

import java.util.HashSet;

class Solution 
{
    public int lengthOfLongestSubstring(String s) 
  {
        int maxLen = 0;
        int n = s.length();

        // Try all substrings starting at i
        for (int i = 0; i < n; i++) 
      {
            HashSet<Character> set = new HashSet<>();
            int currentLen = 0;

            // Try extending the substring to the right
            for (int j = i; j < n; j++) 
            {
                char ch = s.charAt(j);

                if (set.contains(ch)) 
              {
                    break; // Duplicate found, stop expanding
                }

                set.add(ch);
                currentLen++;
            }

            maxLen = Math.max(maxLen, currentLen);
        }
        return maxLen;
    }
}
