
//  --------------------> OPTIMIZED APPROACH <--------------------

// TIME COMPLEXITY : 	O(n) , SPACE COMPLEXITY : O(n) 

class Solution {
    public int longestConsecutive(int[] nums)
{
        // HashSet for O(1) lookup to check if a number exists
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }

        int maxLength = 0 ;

        // Loop through each number to find potential start of a sequence
        for (int num : set) {
            // Start a sequence only if previous number doesn't exist
            if (!set.contains(num - 1)) {
                int currentNum = num;
                int count = 1;

                // Count all consecutive numbers
                while (set.contains(currentNum + 1)) {
                    currentNum++;
                    count++;
                }

                // Update the longest sequence length
                maxLength = Math.max(maxLength, count);
            }
        }

        return maxLength;
    }
}


//  --------------------> BRUTE FORCE APPROACH <--------------------

// TIME COMPLEXITY : 	O(n logn) , SPACE COMPLEXITY : O(n) 

import java.util.Arrays;

class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) return 0;

        // Step 1: Sort the array to bring consecutive numbers together
        Arrays.sort(nums);

        int maxLen = 1;
        int currLen = 1;

        // Step 2: Traverse the sorted array to count consecutive elements
        for (int i = 1; i < nums.length; i++) {
            // Skip duplicates
            if (nums[i] == nums[i - 1]) {
                continue;
            }
            // Check if the current number is consecutive to the previous
            else if (nums[i] == nums[i - 1] + 1) {
                currLen++;
            } else {
                // Reset the current length if sequence breaks
                currLen = 1;
            }

            // Update the max length so far
            maxLen = Math.max(maxLen, currLen);
        }

        return maxLen;
    }
}


