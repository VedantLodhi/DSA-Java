// --------------------> OPTIMIZED APPROACH <--------------------
// TIME COMPLEXITY : O(n) , SPACE COMPLEXITY : O(1)

class Solution 
{
    public int maxProfit(int[] prices) 
    {
      int buyPrice = prices[0] ;
      int maxProfit = 0 ;

      for(int i = 0 ; i < prices.length ; i++)
      {
        if(buyPrice < prices[i])
        {
            int profit = prices[i] - buyPrice  ;
            maxProfit = Math.max(maxProfit,profit) ;
        }

        else
        {
            buyPrice = prices[i] ;
        }
        }   
         return maxProfit ;
    }
}


// --------------------> BRUTE FORCE APPROACH <--------------------
// TIME COMPLEXITY : O(nÂ²) , SPACE COMPLEXITY : O(1)

class Solution {
    public int maxProfit(int[] prices) 
    {
      int maxProfit = 0 ;
      int n = prices.length ;

      for(int i = 0 ; i < n ; i++)
     {
       for(int j = i+1 ; j < n ; j++)
     {
       int profit = prices[j] - prices[i] ;
       maxProfit = Math.max(maxProfit,profit) ;
      }
      }
         return maxProfit ;
      }
      }
      
