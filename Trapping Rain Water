// --------------------> OPTIMIZED APPROACH <--------------------
// TIME COMPLEXITY : O(n) , SPACE COMPLEXITY : O(1)

class Solution 
{
    public int trap(int[] height) 
    {
     int n = height.length ;
     int left = 0 , right = n-1 ; 
     int leftMax = height[left] ;
     int rightMax = height[right] ;
     int ans = 0 ;

     while(left < right)
     {
        if(height[left] < height[right])
        {
            leftMax = Math.max(leftMax,height[left]) ;
            ans += leftMax - height[left] ;
            left++ ;
        }
        else
        {
            rightMax = Math.max(rightMax,height[right]) ;
            ans += rightMax - height[right] ;
            right-- ; 
        }
     }    

      return ans ;
    }
}

// --------------------> BRUTE FORCE APPROACH <--------------------
// TIME COMPLEXITY : O(nÂ²) , SPACE COMPLEXITY : O(1)

class Solution 
{
    public int trap(int[] height) 
{
        int n = height.length;
        int totalWater = 0;

        for (int i = 1; i < n - 1; i++) 
        {
            int leftMax = height[i];
            int rightMax = height[i];

            // Find highest bar on the left of i
            for (int j = 0; j < i; j++)
            {
                leftMax = Math.max(leftMax, height[j]);
            }

            // Find highest bar on the right of i
            for (int j = i + 1; j < n; j++) 
            {
                rightMax = Math.max(rightMax, height[j]);
            }

            // Water that can be trapped at current index
            int waterAtI = Math.min(leftMax, rightMax) - height[i];
            totalWater += waterAtI;
        }

        return totalWater;
    }
}
