//  --------------------> OPTIMIZED APPROACH <--------------------

// TIME COMPLEXITY : 	O(n·k log k) , SPACE COMPLEXITY : O(n·k) 

import java.util.*;  
class Solution
{
    public List<List<String>> groupAnagrams(String[] strs) 
{
        // Create a HashMap to store grouped anagrams.        
        HashMap<String, List<String>> map = new HashMap<>();

        // Loop through each string in the input array
        for (String s : strs) 
{
            // Convert the string to a  sorted character array
            char[] ch = s.toCharArray();
            Arrays.sort(ch);
            
            // Convert the sorted character array back to a string
            String sorted = new String(ch);
            
            // If this sorted string is not already a key in the map, add it
            if (!map.containsKey(sorted)) {
                map.put(sorted, new LinkedList<String>());
            }

            // Add the original string to the corresponding list in the map
            map.get(sorted).add(s);
        }

        // Return all grouped anagrams as a new list
        return new LinkedList<>(map.values());
    }
}

//  --------------------> BRUTE FORCE APPROACH <--------------------

// TIME COMPLEXITY : 	O(m∗nlogn) , SPACE COMPLEXITY : O(m∗n) 

import java.util.*;
public class Solution 
{
    public List<List<String>> groupAnagrams(String[] strs) {
        // HashMap to hold the sorted string as key and list of anagrams as value
        Map<String, List<String>> res = new HashMap<>();

        // Iterate over each string in the input array
        for (String s : strs) 
{
            // Convert string to character array and sort it
            char[] charArray = s.toCharArray();
            Arrays.sort(charArray);

            // Convert sorted char array back to string
            String sortedS = new String(charArray);

            // Add the original string to the corresponding anagram group
            res.putIfAbsent(sortedS, new ArrayList<>());
            res.get(sortedS).add(s);
        }

        // Return the list of anagram groups
        return new ArrayList<>(res.values());
    }
}


