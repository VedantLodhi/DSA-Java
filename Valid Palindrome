// --------------------> MOST OPTIMIZED APPROACH (USING TWO POINTER) <--------------------
// TIME COMPLEXITY : O(n) , SPACE COMPLEXITY : O(1)

class Solution
{
    // Checks if a given string is a valid palindrome
    public boolean isPalindrome(String s) {

        // Convert the string to lowercase to ignore case sensitivity
        s = s.toLowerCase();

        // Use StringBuilder to store only alphanumeric characters
        StringBuilder filtered = new StringBuilder();

        // Filter out non-alphanumeric characters
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            // Check if the character is a lowercase letter or digit
            if ((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')) {
                filtered.append(ch);
            }
        }

        // Check if the filtered string is a palindrome
        int left = 0;
        int right = filtered.length() - 1;

        while (left < right) {
            if (filtered.charAt(left) != filtered.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
}

// -------------------->  OPTIMIZED APPROACH <--------------------
// TIME COMPLEXITY : O(n) , SPACE COMPLEXITY : O(n)

class Solution 
{
    public boolean isPalindrome(String s) 
    {
        // Convert the entire string to lowercase to ensure case insensitivity
        s = s.toLowerCase();

        // StringBuilder to store only the alphanumeric characters
        StringBuilder sb = new StringBuilder();   

        // Loop through each character of the string
        for (int i = 0; i < s.length(); i++) 
        {
            // Check if the character is a lowercase letter (a-z) or a digit (0-9)
            if ((s.charAt(i) >= 97 && s.charAt(i) <= 122) || (s.charAt(i) >= 48 && s.charAt(i) <= 57)) 
            {
                // Append only valid characters to StringBuilder
                sb.append(s.charAt(i)); 
            }
        }    

        // Check for palindrome: compare characters from both ends
        for (int i = 0; i < sb.length() / 2; i++) 
        {
            // If characters at mirrored positions don't match, it's not a palindrome
            if (sb.charAt(i) != sb.charAt(sb.length() - 1 - i)) 
            {
                return false; 
            }
        }

        // If all characters matched, return true
        return true; 
    }
}
