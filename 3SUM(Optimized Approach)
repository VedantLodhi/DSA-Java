// --------------------> BRUTE FORCE APPROACH <--------------------
// TIME COMPLEXITY : O(nlog(n)*nÂ²) , SPACE COMPLEXITY : O(Unique Triplet)

import java.util.*;

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) 
    {
        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);  // Sort the array first

        for (int i = 0; i < n; i++) 
        {
            // Skip duplicate elements for i
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int j = i + 1;
            int k = n - 1;

            while (j < k) 
            {
                int sum = nums[i] + nums[j] + nums[k];

                if (sum < 0) 
                {
                    j++;
                } 
                else if (sum > 0) 
                {
                    k--;
                }
                 else 
                 {
                    // Triplet found
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;

                    // Skip duplicates for j
                    while (j < k && nums[j] == nums[j - 1]) 
                    {
                        j++;
                    }
                }
            }
        }

        return ans;
    }
}
