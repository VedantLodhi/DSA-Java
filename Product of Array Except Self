//  --------------------> OPTIMIZED APPROACH <--------------------
// TIME COMPLEXITY : O(n)  , SPACE COMPLEXITY : O(1) 

class Solution
{
    public int[] productExceptSelf(int[] nums) 
{
        int n = nums.length;
        int[] ans = new int[n];

        // Step 1: Initialize all elements of result array as 1
      
        for (int i = 0; i < n; i++)
       {
            ans[i] = 1;
        }

        // Step 2: Calculate prefix product for each index
        // ans[i] will contain the product of all elements to the left of i
        
        for (int i = 1; i < n; i++)
        {
          ans[i] = ans[i - 1] * nums[i - 1];
        }

        // Step 3: Multiply with suffix product
        // We traverse from right to left to keep track of product of elements to the right
       
        int suffix = 1;
        for (int i = n - 2; i >= 0; i--) 
        {
            suffix *= nums[i + 1];   // product of all elements to the right of i
            ans[i] *= suffix;        // final product excluding self = prefix * suffix
        }

        return ans;
    }
}


//  --------------------> BRUTE FORCE APPROACH <--------------------
// TIME COMPLEXITY : O(nÂ²)  , SPACE COMPLEXITY : O(n) 

class Solution 
{
    public int[] productExceptSelf(int[] nums)
{
        int n = nums.length; // Get the length of the input array

        // Initialize the result array with default values 
        int[] ans = new int[n];

        // Iterate through each element of the input array
        for (int i = 0; i < n; i++) {
            int product = 1; // Variable to store product for index i

            // Multiply all elements except the one at index i
            for (int j = 0; j < n; j++) 
         {
                if (i != j) 
               {
                  product *= nums[j];
                }
            }

            // Store the product in the result array
            ans[i] = product;
        }

        // Return the final result array
        return ans;
    }
}

